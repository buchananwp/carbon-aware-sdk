$schema: http://json-schema.org/draft-07/schema#
$id: http://azureml/sdk-2-0/AutoMLCommon.yaml

title: example specification
description: 'A carbon-aware SDK component that can _______.

type: object
properties:
  type:
    const: automl_common

  general:
    additionalProperties: false
    properties:
      task:
        enum: [classification, regression, forecasting]
        type: string
        description: The type of AutoML task to run. Values can be 'classification', 'regression', or 'forecasting' depending on the type of AutoML problem to solve.
      primary_metric:
          oneOf:
          - enum: ['AUC_weighted', 'accuracy', 'norm_macro_recall', 'average_precision_score_weighted', 'precision_score_weighted', 'spearman_correlation', 'normalized_root_mean_squared_error', 'r2_score', 'normalized_mean_absolute_error', 'normalized_root_mean_squared_log_error']
          - {$ref: '#definitions/InputValuePlaceholder'}
          description: The metric that AutoML will optimize for model selection. AutoML collects more metrics than it can optimize.
      enable_model_explainability:
        $ref: '#/definitions/BooleanOrPlaceholder'
        description: Whether to enable explaining the best AutoML model at the end of all AutoML training trials (children jobs). The default is True.
    required:
      - task
      - primary_metric

  limits:
    additionalProperties: false
    properties:
      max_total_trials:
        $ref: '#/definitions/IntegerOrPlaceholder'
        description: The maximum total number of different algorithm and parameter combinations (trials) to try during an AutoML job. If not specified, the default is 1000 trials. If using 'enable_early_termination' the number of trials used can be smaller.

  data:
    additionalProperties: false  
    properties:
      target_column_name:
        $ref: '#/definitions/StringOrPlaceholder'
        description: The name of the column to target for predictions. It must always be specified. This parameter is applicable to 'dataset', 'validation_dataset' and 'test_dataset'.
      weight_column_name:
        $ref: '#/definitions/StringOrPlaceholder'
        description: The name of the sample weight column. AutoML supports a weighted column as an input, causing rows in the data to be weighted up or down. If the input data doesn't have column names, column indices can be used instead, expressed as integers.    
      training:
        additionalProperties: false
        properties:
          dataset:
            $ref: '#definitions/InputDataDefinition'
            description: The data to be used within the job. It should contain both training feature columns and a target column. the parameter main_data must always be provided
        required:
        - dataset        

      validation:
        additionalProperties: false
        properties:
          dataset:
            $ref: '#definitions/InputDataDefinition'
            description: The validation data to be used within the job. It should contain both training features and label column (optionally a sample weights column). If 'validation_dataset' is specified, then 'dataset' and 'target_column_name' parameters must be specified.
          validation_data_size:
            $ref: '#/definitions/NumberOrPlaceholder'
            description: What fraction of the data to hold out for validation when user validation data is not specified. This should be between 0.0 and 1.0 non-inclusive.
          n_cross_validations:
            $ref: '#/definitions/IntegerOrPlaceholder'
            description: How many cross validations to perform when user validation data is not specified.
          cv_split_column_names:
            $ref: '#/definitions/ArrayOfStrings'
            description: Columns to use for CVSPlit data.
      
      test:
        additionalProperties: false
        properties:
          dataset:
            $ref: '#definitions/InputDataDefinition'
            description: The test data to be used within the job.
          test_data_size:
            $ref: '#/definitions/NumberOrPlaceholder'
            description: What fraction of the data to hold out for test when user test dataset is not specified. This should be between 0.0 and 1.0 non-inclusive.
    required:        
      - target_column_name
      - training
      
  featurization:
    additionalProperties: false
    properties:
      featurization_config:
        oneOf:
          - enum: [auto, off]
            $ref: '#/definitions/StringOrPlaceholder'
          - {$ref: '#/definitions/custom_featurization_config'}
        description: auto / off / custom_featurization_config for whether featurization step should be done automatically or not, or whether customized featurization should be used. If the input data is sparse, featurization cannot be turned on.
      enable_dnn_featurization:
        $ref: '#/definitions/BooleanOrPlaceholder'
        description: If True, this parameter enables BERT DNN based featurization. Default value is False.

  forecasting:
    additionalProperties: false
    properties:
      forecasting_config:
        $ref: '#/definitions/forecasting_config'
        description: Time Series Forecasting model configuration parameters

  training:
    additionalProperties: false
    properties:
      blocked_training_algorithms:
        type: array
        items:
          enum: 
            # Classification
            - LogisticRegression
            - SGD # classification/ regregssion/ forecasting
        description: A list of algorithms (base model) to ignore for an AutoML job.
      allowed_training_algorithms:
        type: array
        items:
          enum: 
            # Classification
            - LogisticRegression
        description: A list of algorithms (base model) to try in the multiple trials. If not specified, then all algorithms supported for the task are used minus any specified in blocked_training_algorithms.
      enable_dnn_training:
        $ref: '#/definitions/BooleanOrPlaceholder'
        description: If True, this parameter enables DNN based training like when using ForecastTCN neural network model. Default value is False.
      enable_onnx_compatible_models:
        $ref: '#/definitions/BooleanOrPlaceholder'
        description: Flag for enabling onnx compatible models.
      
additionalProperties: false

definitions:

  OutputDataDefinition:
    oneOf:
    - type: string
    - { $ref: 'Job.yaml#/definitions/outputData' }

  InputDataDefinition:
    { $ref: 'Job.yaml#/definitions/inputData' }

  custom_featurization_config:
    description: Defines feature engineering configuration for AutoML machine learning jobs in Azure Machine Learning. 
    type: object
    additionalProperties: false
    properties:
      blocked_transformers:
        type: array
        description: A list of transformers to ignore when featurizing.
        items:
          enum: 
          - TextTargetEncoder
          - OneHotEncoder
               
      column_purposes:
        type: object
        description: A dictionary of column names and feature types used to update column purpose.
        patternProperties: {
        '.*': {type: string}
        }
      transformer_params:
        $ref: '#/definitions/ArrayOfTransformerParameters'
      dataset_language:
        type: string
      drop_columns:
        $ref: '#/definitions/ArrayOfStrings'
        description: Columns to drop.
        
  
  forecasting_config:
    description: Parameters needed to train Forecasting models in Azure Machine Learning.
    type: object
    additionalProperties: false
    properties:
      country_or_region_for_holidays:
        type: string
        description: The country/region used to generate holiday features. These should be ISO 3166 two-letter country/region code, for example 'US' or 'GB'. 
      forecast_horizon:
        $ref: '#definitions/AutoOrInteger'
        description: The desired maximum forecast horizon in units of time-series frequency. The default value is 1. Units are based on the time interval of your training data, e.g., monthly, weekly that the forecaster should predict out.
      feature_lags:
        items:          
          - enum: ['auto']
        description: Flag for generating lags for the numeric features with 'auto' or None.
      seasonality:
        $ref: '#definitions/AutoOrInteger'
        description: Set time series seasonality as an integer multiple of the series frequency. If seasonality is set to 'auto', it will be inferred. If set to null, the time series is assumed non-seasonal which is equivalent to seasonality=1
 
           
  AutoOrIntegerOrIntegerList:
    oneOf:
    - {type: string, enum: ['auto']}
    - {type: integer}
    - {$ref: '#definitions/ArrayOfIntegers'}


  InputPathPlaceholder:
    properties:
      $inputPath: {description: Name of the input., type: string}
    required: [$inputPath]
    type: object

  StackEnsembleSettings:
    properties:
      stack_meta_learner_type:
        enum: [LogisticRegression, LogisticRegressionCV, LightGBMClassifier, ElasticNet, ElasticNetCV, LightGBMRegressor, LinearRegression]
        type: string
        description: The meta-learner is a model trained on the output of the individual heterogeneous models.
      stack_meta_learner_train_percentage:
        $ref: '#/definitions/NumberOrPlaceholder'
        description: Specifies the proportion of the training set (when choosing train and validation type of training) to be reserved for training the meta-learner. Default value is 0.2
      stack_meta_learner_kwargs:
        type: object
        description: Optional parameters to pass to the initializer of the meta-learner. These parameters and parameter types mirror the parameters and parameter types from the corresponding model constructor, and are forwarded to the model constructor.
    
  ColumnTransformer:
    additionalProperties: false
    properties:
      fields:
        $ref: '#/definitions/ArrayOfStrings'
        description: Column names/ features on which transformer logic would be applied.
      parameters:
        type: object
        description: Optional transformer constructor parameters.
        
  TransformerParameter:
    additionalProperties: false
    properties:
      name:
        enum: 
          - TfIdf
          - Imputer
          - HashOneHotEncoder 
        type: string
        description: Transformer name "Imputer"/"HotOneEncoder"/"tfidf"
      column_transformers:
        $ref: "#/definitions/ArrayOfColumnTransformers" 
